#Getting Started
install.packages(c('rgl', 'ggplot2', 'alphashape3d', 'morgenstemning', 'adk', 'filehash', 'devtools', 'bit', 'bitops', 'bigmemory.sri', 'shiny', 'downloader'), dependencies=TRUE)
install.packages("nat", dependencies=TRUE)
install.packages("nat.nblast", dependencies=TRUE)
devtools::install_github("jefferis/flycircuit", dependencies=TRUE)
devtools::install_github("jefferislab/nat.flybrains", dependencies=TRUE)
devtools::install_github("jefferislab/nat.templatebrains")
devtools::install_github("trestletech/shinyRGL")
devtools::install_github("AnalytixWare/ShinySky")
devtools::install_github('frulhns', 'jefferis')
nat.flybrains::download_jefferislab_registrations()
devtools::source_gist("bbaf5d53353b3944c090", filename = "FlyCircuitStartupNat.R")
# download NBLAST all by all score matrix (used e.g. for hierarchical clustering)
# this downloads a single 2Gb file to your machine as a one-off
fc_download_data('http://flybrain.mrc-lmb.cam.ac.uk/si/nblast/flycircuit/allbyallblastcv4.5.ff',
type='ff')
fc_download_data('http://flybrain.mrc-lmb.cam.ac.uk/si/nblast/flycircuit/allbyallblastcv4.5.ff',type='ff')
dps<-read.neuronlistfh("http://flybrain.mrc-lmb.cam.ac.uk/si/nblast/flycircuit/dpscanon.rds",
localdir=getOption('flycircuit.datadir'))
remotesync(dps,download.missing = TRUE)
#Getting Started
install.packages(c('rgl', 'ggplot2', 'alphashape3d', 'morgenstemning', 'adk', 'filehash', 'devtools', 'bit', 'bitops', 'bigmemory.sri', 'shiny', 'downloader'), dependencies=TRUE)
install.packages("nat", dependencies=TRUE)
install.packages("nat.nblast", dependencies=TRUE)
devtools::install_github("jefferis/flycircuit", dependencies=TRUE)
devtools::install_github("jefferislab/nat.flybrains", dependencies=TRUE)
devtools::install_github("jefferislab/nat.templatebrains")
devtools::install_github("trestletech/shinyRGL")
devtools::install_github("AnalytixWare/ShinySky")
devtools::install_github('frulhns', 'jefferis')
nat.flybrains::download_jefferislab_registrations()
devtools::source_gist("bbaf5d53353b3944c090", filename = "FlyCircuitStartupNat.R")
library("digest", lib.loc="~/R/win-library/3.4")
detach("package:digest", unload=TRUE)
library("digest", lib.loc="~/R/win-library/3.4")
detach("package:digest", unload=TRUE)
library("digest", lib.loc="~/R/win-library/3.4")
3
detach("package:digest", unload=TRUE)
library("digest", lib.loc="~/R/win-library/3.4")
install.packages("digest", dependencies = TRUE)
install.packages("digest", dependencies = TRUE)
install.packages("nat", dependencies=TRUE)
install.packages("nat.nblast", dependencies=TRUE)
devtools::install_github("jefferis/flycircuit", dependencies=TRUE)
devtools::install_github("jefferislab/nat.flybrains", dependencies=TRUE)
devtools::install_github("jefferislab/nat.templatebrains")
devtools::install_github("trestletech/shinyRGL")
devtools::install_github("AnalytixWare/ShinySky")
devtools::install_github('frulhns', 'jefferis')
nat.flybrains::download_jefferislab_registrations()
devtools::source_gist("bbaf5d53353b3944c090", filename = "FlyCircuitStartupNat.R")
# download NBLAST all by all score matrix (used e.g. for hierarchical clustering)
# this downloads a single 2Gb file to your machine as a one-off
fc_download_data('http://flybrain.mrc-lmb.cam.ac.uk/si/nblast/flycircuit/allbyallblastcv4.5.ff',
type='ff')
# the actual neuron data will be downloaded and cached to your machine on demand
dps<-read.neuronlistfh("http://flybrain.mrc-lmb.cam.ac.uk/si/nblast/flycircuit/dpscanon.rds",
localdir=getOption('flycircuit.datadir'))
remotesync(dps,download.missing = TRUE)
?cmtk
cmtk
install("C:\Users\Wilson Lab\Documents\MATLAB\R-code\natviewer")
install("C:\Users\Wilson Lab\Documents\MATLAB\R-code\natviewer")
install('C:\Users\Wilson Lab\Documents\MATLAB\R-code\natviewer')
install('C:/Users/Wilson Lab/Documents/MATLAB/R-code/natviewer')
install('C:/Users/Wilson Lab/Documents/MATLAB/R-code/natviewer')
?install
intall.packages('C:/Users/Wilson Lab/Documents/MATLAB/R-code/natviewer')
install.packages('C:/Users/Wilson Lab/Documents/MATLAB/R-code/natviewer')
install.packages('C:/Users/Wilson Lab/Documents/MATLAB/R-code/natviewer', type = 'source')
library("nat", lib.loc="~/R/win-library/3.4")
library("nat.flybrains", lib.loc="~/R/win-library/3.4")
library("nat.nblast", lib.loc="~/R/win-library/3.4")
library("nat.utils", lib.loc="~/R/win-library/3.4")
install('C:/Users/Wilson Lab/Documents/MATLAB/R-code/natviewer/natviewer')
install.packages('C:/Users/Wilson Lab/Documents/MATLAB/R-code/natviewer/natviewer')
cmtk.bindir()
cmtk.bindir()
library(nat);cmtk.dof2mat(version = TRUE)
library(nat)
cmtk
cmtk.version()
?cmtk
cmtk.bindir
cmtk.bindir()
?cmtk.version
cmtk.version
cmtk.version()
cmtk.bindir
cmtk.bindir()
library("nat", lib.loc="~/R/win-library/3.4")
library("nat.flybrains", lib.loc="~/R/win-library/3.4")
library("nat.nblast", lib.loc="~/R/win-library/3.4")
detach("package:nat.templatebrains", unload=TRUE)
library("nat.templatebrains", lib.loc="~/R/win-library/3.4")
library("nat.utils", lib.loc="~/R/win-library/3.4")
library("flycircuit", lib.loc="~/R/win-library/3.4")
cmtk.bindir()
library(nat)
cmdk.dof2mat(version = TRUE)
cmtk.dof2mat(version = TRUE)
test <- read.neuron.fiji('C:/users/wilson lab/desktop/2017_May_29_exp1.traces')
test <- read.neuron.fiji('C:/users/wilson lab/desktop/2017_May_29_exp1.traces', simplify=TRUE)
filePath <- 'C:/users/wilson lab/desktop/2017_May_29_exp1'
test2 <- read.neuron(cbind(filePath, '.traces'), class="neuron")
c(filePath, '.traces')
test2 <- read.neuron(paste(filePath, '.traces'), class="neuron")
test2 <- read.neuron(paste(filePath, '.swc'), class="neuron")
test2 <- read.neuron('C:/users/wilson lab/desktop/2017_May_29_exp1.traces'), class="neuron")
test2 <- read.neuron('C:/users/wilson lab/desktop/2017_May_29_exp1.traces', class="neuron")
test <- read.neuron('C:/users/wilson lab/desktop/2017_May_29_exp1.swc', class="neuron")
# Allow production of figures using RGL
library(knitr)
library(rgl)
knit_hooks$set(rgl = hook_rgl)
opts_chunk$set(dev=c('png','pdf'))
# Load flycircuit and nat packages
library(flycircuit)
library(nat)
library(nat.nblast)
library(nat.flybrains)
# plot a single neuron
plot3dfc("VGlut-F-200257")
# plot a single neuron
plot3dfc("test")
# plot a single neuron
plot3dfc(test)
?test
test
plot3d(test)
part1 = test[[1]]
part2 = test[[2]]
part3 = test[[3]]
part2
plot3d(part1)
plot3d(part2)
plot3d(part2)
realNeuron = part1
# Add the original brain to the 3D display, for context
plot3d(FCWB) # IS2, JFRC2, FCWB, T1, IBNWB, Cell07
plot3d(part1)
path <- 'C:\Users\Wilson Lab\Documents\MATLAB\R-code\Registration\Registration\warp\FCWB_biocytin_01_warp_m0g80c8e1e-1x26r4.list\registration'
path <- "C:\Users\Wilson Lab\Documents\MATLAB\R-code\Registration\Registration\warp\FCWB_biocytin_01_warp_m0g80c8e1e-1x26r4.list\registration"
cd
getwd()
setwd("~/MATLAB/R-code")
1x26r4.list
path <- c("Registration\Registration\warp\FCWB_biocytin_01_warp_m0g80c8e1e-1x26r4.list\registration")
Registration
path <- "Registration/Registration/warp/FCWB_biocytin_01_warp_m0g80c8e1e-1x26r4.list/registration")
path <- "Registration/Registration/warp/FCWB_biocytin_01_warp_m0g80c8e1e-1x26r4.list/registration"
is.cmtkreg(path)
path <- "Registration/Registration/warp/FCWB_biocytin_01_warp_m0g80c8e1e-1x26r4.list"
is.cmtkreg(path)
path <- "Registration/Registration/warp/FCWB_biocytin_01_warp_m0g80c8e1e-1x26r4.list/registration.gz"
is.cmtkreg(path)
path <- "Registration/Registration/warp/FCWB_biocytin_01_warp_m0g80c8e1e-1x26r4.list/registration.txt"
is.cmtkreg(path)
cmtkreg(path)
as.cmtkreg(path)
x <- as.cmtkreg(path)
x
test <- xform(realNeuron, x)
plot3d(test)
plot3d(test)
# Add the original brain to the 3D display, for context
plot3d(FCWB) # IS2, JFRC2, FCWB, T1, IBNWB, Cell07
mainLabels <- c("LH_L", "SIP_L", "SLP_L", "SMP_L", "AVLP_L", "CRE_L", "MB_ML_L", "MB_PED_L", "MB_VL_L", "PVLP_L")
activeLabels = mainLabels[c(2,3,6,10)]
al <- 0.2
# Plot region labels if applicable
if(!is.na(activeLabels[1] )){
fcwbnpsurf(activeLabels, alpha=al)
}
mainLabels <- c("LH_R", "SIP_L", "SLP_L", "SMP_L", "AVLP_L", "CRE_L", "MB_ML_L", "MB_PED_L", "MB_VL_L", "PVLP_L")
activeLabels = mainLabels[c(1)]
al <- 0.2
# Plot region labels if applicable
if(!is.na(activeLabels[1] )){
fcwbnpsurf(activeLabels, alpha=al)
}
# Allow production of figures using RGL
library(knitr)
library(rgl)
knit_hooks$set(rgl = hook_rgl)
opts_chunk$set(dev=c('png','pdf'))
# Load flycircuit and nat packages
library(flycircuit)
library(nat)
library(nat.nblast)
library(nat.flybrains)
# plot a single neuron
plot3dfc("VGlut-F-200257")
dps <-read.neuronlistfh('C://Users//Wilson Lab//Documents//R//rpkg-flycircuit//data//dpscanon.rds')
plot3dfc("VGlut-F-200257")
# Allow production of figures using RGL
library(knitr)
library(rgl)
knit_hooks$set(rgl = hook_rgl)
opts_chunk$set(dev=c('png','pdf'))
# Load flycircuit and nat packages
library(flycircuit)
library(nat)
library(nat.nblast)
library(nat.flybrains)
# plot a single neuron
plot3dfc("VGlut-F-200257")
highConf <- c("TH-F-000005","TH-F-000011","TH-M-000071","TH-M-000030","TH-M-000013","TH-F-300067","TH-F-100046","TH-F-000012",
"TH-F-100101", "TH-F-300078")
lowConf <- c("TH-F-000007","TH-M-100021","TH-M-100041","TH-M-100044","TH-M-100071","TH-M-200035","TH-M-200052","TH-M-200056",
"TH-M-200062","TH-M-100010","TH-M-100008","TH-M-100006","TH-M-100005","TH-M-000069","TH-M-000042","TH-M-000031",
"TH-F-300052","TH-F-300004","TH-F-200035","TH-F-100110","TH-F-100105","TH-F-000098","TH-F-000086","TH-F-000081",
"TH-F-000037","TH-M-300048")
allCells <-c("TH-F-000005","TH-F-000011","TH-M-000071","TH-M-000030","TH-M-000013","TH-F-300067","TH-F-100046","TH-F-000012",
"TH-F-100101", "TH-F-300078","TH-F-000007","TH-M-100021","TH-M-100041","TH-M-100044","TH-M-100071","TH-M-200035","TH-M-200052","TH-M-200056",
"TH-M-200062","TH-M-100010","TH-M-100008","TH-M-100006","TH-M-100005","TH-M-000069","TH-M-000042","TH-M-000031",
"TH-F-300052","TH-F-300004","TH-F-200035","TH-F-100110","TH-F-100105","TH-F-000098","TH-F-000086","TH-F-000081",
"TH-F-000037","TH-M-300048")
regionLabels <- read.csv("RegionLabels.csv")
while (TRUE){
# Plot region labels if applicable
if(!is.na(activeLabels[1])){
fcwbnpsurf(activeLabels, alpha=al)
}
# Plot selected neuron
plot3dfc(currSet[counterI], col = 'red', soma = TRUE, db=dps)
print(paste("Neuron:", currSet[counterI]))
inputChar <- readline(prompt="Enter to plot next neuron, 'x' to exit ")
npop3d(rgl.ids()$id[2:length(rgl.ids()$id)])
if(inputChar == ""){
if(counterI == length(currSet)){
counterI = 1
}else{
counterI = counterI + 1
}
} else if(inputChar == "x"){
break
}
}
library(flycircuit)
source('~/MATLAB/R-code/DA_screening.R')
plot3d(test)
# Add the original brain to the 3D display, for context
plot3d(FCWB) # IS2, JFRC2, FCWB, T1, IBNWB, Cell07
plot3d(test)
# Add the original brain to the 3D display, for context
plot3d(FCWB) # IS2, JFRC2, FCWB, T1, IBNWB, Cell07
# Load neuron
test <- read.neuron('C:/users/wilson lab/desktop/2017_May_29_exp1.swc', class="neuron")
part1 <- test[[1]]
realNeuron <- part1
# Load registration
path <- "Registration/Registration/warp/FCWB_biocytin_01_warp_m0g80c8e1e-1x26r4.list/registration.txt"
x <- as.cmtkreg(path)
test <- xform(realNeuron, x)
plot3d(test)
# Add the original brain to the 3D display, for context
plot3d(FCWB) # IS2, JFRC2, FCWB, T1, IBNWB, Cell07
write.neuron(test, 'C:\Users\Wilson Lab\Documents\MATLAB', format='swc')
write.neuron(test, 'C:/Users/Wilson Lab/Documents/MATLAB', format='swc')
write.neuron(test, 'C:/Users/Wilson Lab/Documents/MATLAB', format='swc')
write.neuron(test, 'C:/Users/Wilson Lab/Documents/MATLAB/registeredNeuron', format='swc')
myNeuron = read.neuron('C:/Users/Wilson Lab/Documents/MATLAB/registeredNeuron', class='neuron')
myNeuron = read.neuron('C:/Users/Wilson Lab/Documents/MATLAB/registeredNeuron.swc', class='neuron')
plot3d(myNeuron)
myNeuron = read.neuron('C:/Users/Wilson Lab/Documents/MATLAB/registeredNeuron.swc', class='neuron')
plot3d(myNeuron)
plot3d(FCWB)
dps<-read.neuronlistfh("http://flybrain.mrc-lmb.cam.ac.uk/si/nblast/flycircuit/dpscanon.rds",
localdir=getOption('flycircuit.datadir'))
remotesync(dps,download.missing = TRUE)
targetNeuron = "fru-F-700078"
plot3dfc(targetNeuron)
plot3dfc(targetNeuron, db=dps)
plot3d(FCWB)
listA <- c("TH-F-300078", "TH-M-000071", "TH-F-000011")
listA <- c("TH-F-300078", "TH-M-000071", "TH-F-000011")
plot3dfc(listA[1])
plot3dfc(listA[1], db=dps)
plot3dfc(listA, db=dps)
listA <- c("TH-F-300078", "TH-M-000071", "TH-F-000011")
listb <- c("TH-F-000012", "TH-F-100046", "TH-M-000013", "TH-M-000030")
listd <- c("TH-F-300052", "TH-F-300067", "TH-M-000042", "TH-M-200035", "TH-M-300048")
# DAN type examples
listA <- c("TH-F-300078", "TH-M-000071", "TH-F-000011")
listb <- c("TH-F-000012", "TH-F-100046", "TH-M-000013", "TH-M-000030")
listd <- c("TH-F-300052", "TH-F-300067", "TH-M-000042", "TH-M-200035", "TH-M-300048")
plot3d(FCWB)
plot3dfc(listB, db=dps)
# DAN type examples
listA <- c("TH-F-300078", "TH-M-000071", "TH-F-000011")
listB <- c("TH-F-000012", "TH-F-100046", "TH-M-000013", "TH-M-000030")
listD <- c("TH-F-300052", "TH-F-300067", "TH-M-000042", "TH-M-200035", "TH-M-300048")
plot3d(FCWB)
plot3dfc(listB, db=dps)
plot3dfc(listB[1], db=dps)
FCWB
plot3d(FCWB)
plot3dfc(listB[1], db=dps)
plot3d(FCWB)
plot3dfc(listB[2], db=dps)
plot3d(FCWB)
plot3dfc(listB[2], db=dps)
plot3d(FCWB)
plot3dfc(listB[1:2], db=dps)
plot3d(FCWB)
plot3dfc(listB[1:2], db=dps)
plot3dfc(listB[2], db=dps)
# DAN type examples
listA <- c("TH-F-300078", "TH-M-000071", "TH-F-000011")
listB <- c("TH-F-000012", "TH-F-100046", "TH-M-000013", "TH-M-000030")
listD <- c("TH-F-300052", "TH-F-300067", "TH-M-000042", "TH-M-200035", "TH-M-300048")
plot3d(FCWB)
plot3dfc(listD, db=dps)
plot3d(FCWB)
plot3dfc(listD[1], db=dps)
plot3dfc(listD[2], db=dps)
plot3d(FCWB)
plot3dfc(listD[2], db=dps)
plot3dfc(listD[3], db=dps)
plot3d(FCWB)
plot3dfc(listD[3], db=dps)
highConf <- c("TH-F-000005","TH-F-000011","TH-M-000071","TH-M-000030","TH-M-000013","TH-F-300067","TH-F-100046","TH-F-000012",
"TH-F-100101", "TH-F-300078")
regionLabels <- read.csv("RegionLabels.csv")
# Initiate Plotting window
plot3d(FCWB)
# Loop through plots
counterI = 1
currSet <- allCells
mainLabels <- c("AL_L","AVLP_L","CRE_L","FLA_L","GNG",
"IB_L","ICL_L","IPS_L","IVLP_L","LAL_L",
"LH_L","MB_ML_L","MB_PED_L","MB_VL_L","PLP_L",
"PRW","PVLP_L","SAD","SCL_L","SIP_L",
"SLP_L","SMP_L","SPS_L","VES_L")
activeLabels = mainLabels[c(17,19)]
al <- 0.5
while (TRUE){
# Plot region labels if applicable
if(!is.na(activeLabels[1])){
fcwbnpsurf(activeLabels, alpha=al)
}
# Plot selected neuron
plot3dfc(currSet[counterI], col = 'red', soma = TRUE, db=dps)
print(paste("Neuron:", currSet[counterI]))
inputChar <- readline(prompt="Enter to plot next neuron, 'x' to exit ")
npop3d(rgl.ids()$id[2:length(rgl.ids()$id)])
if(inputChar == ""){
if(counterI == length(currSet)){
counterI = 1
}else{
counterI = counterI + 1
}
} else if(inputChar == "x"){
break
}
}
exemplarPPM2 <- "TH-M-100010"
plot3d(FCWB)
plot3dfc("TH-M-100010", db=dps)
plot3d(FCWB)
plot3dfc("TH-F-000005", db=dps)
highConf <- c("TH-F-000005","TH-F-000011","TH-M-000071","TH-M-000030","TH-M-000013","TH-F-300067","TH-F-100046","TH-F-000012",
"TH-F-100101", "TH-F-300078")
lowConf <- c("TH-F-000007","TH-M-100021","TH-M-100041","TH-M-100044","TH-M-100071","TH-M-200035","TH-M-200052","TH-M-200056",
"TH-M-200062","TH-M-100010","TH-M-100008","TH-M-100006","TH-M-100005","TH-M-000069","TH-M-000042","TH-M-000031",
"TH-F-300052","TH-F-300004","TH-F-200035","TH-F-100110","TH-F-100105","TH-F-000098","TH-F-000086","TH-F-000081",
"TH-F-000037","TH-M-300048")
allCells <-c("TH-F-000005","TH-F-000011","TH-M-000071","TH-M-000030","TH-M-000013","TH-F-300067","TH-F-100046","TH-F-000012",
"TH-F-100101", "TH-F-300078","TH-F-000007","TH-M-100021","TH-M-100041","TH-M-100044","TH-M-100071","TH-M-200035","TH-M-200052","TH-M-200056",
"TH-M-200062","TH-M-100010","TH-M-100008","TH-M-100006","TH-M-100005","TH-M-000069","TH-M-000042","TH-M-000031",
"TH-F-300052","TH-F-300004","TH-F-200035","TH-F-100110","TH-F-100105","TH-F-000098","TH-F-000086","TH-F-000081",
"TH-F-000037","TH-M-300048")
regionLabels <- read.csv("RegionLabels.csv")
# Initiate Plotting window
plot3d(FCWB)
# Loop through plots
counterI = 1
currSet <- highConf
mainLabels <- c("AL_L","AVLP_L","CRE_L","FLA_L","GNG",
"IB_L","ICL_L","IPS_L","IVLP_L","LAL_L",
"LH_L","MB_ML_L","MB_PED_L","MB_VL_L","PLP_L",
"PRW","PVLP_L","SAD","SCL_L","SIP_L",
"SLP_L","SMP_L","SPS_L","VES_L")
activeLabels = mainLabels[c(17,19)]
al <- 0.5
while (TRUE){
# Plot region labels if applicable
if(!is.na(activeLabels[1])){
fcwbnpsurf(activeLabels, alpha=al)
}
# Plot selected neuron
plot3dfc(currSet[counterI], col = 'red', soma = TRUE, db=dps)
print(paste("Neuron:", currSet[counterI]))
inputChar <- readline(prompt="Enter to plot next neuron, 'x' to exit ")
npop3d(rgl.ids()$id[2:length(rgl.ids()$id)])
if(inputChar == ""){
if(counterI == length(currSet)){
counterI = 1
}else{
counterI = counterI + 1
}
} else if(inputChar == "x"){
break
}
}
plot3dfc("TH-F-000081
plot3d(FCWB)
plot3dfc("TH-F-000005", db=dps)
plot3dfc("TH-M-100010", db=dps)
exemplarB <- "TH-F-100046"
exemplarC <- myNeuron
exemplarD <- "TH-F-300067"
exemplarPPM2 <- "TH-M-100010"
exemplarALT <- "TH-M-000048"
exemplarALT-PLPC <- "TH-F-000023"
exemplarC <- myNeuron
exemplarD <- "TH-F-300067"
exemplarPPM2 <- "TH-M-100010"
exemplarALT <- "TH-M-000048"
exemplarALT_PLPC <- "TH-F-000023"
plot3d(FCWB)
plot3dfc(exemplarALT, db=dps)
plot3d(FCWB)
plot3dfc(exemplarALT_PLPC
plot3d(FCWB)
plot3dfc(exemplarALT_PLPC, db=dps)
plot3d(FCWB)
plot3dfc(exemplarD, db=dps)
plot3d(FCWB)
plot3dfc(exemplarA, db=dps)
exemplarA <- "TH-F-300078"
exemplarB <- "TH-F-100046"
exemplarC <- myNeuron
exemplarD <- "TH-F-300067"
exemplarPPM2 <- "TH-M-100010"
exemplarALT <- "TH-M-000048"
exemplarALT_PLPC <- "TH-F-000023"
plot3d(FCWB)
plot3dfc(exemplarA, db=dps)
plot3d(FCWB)
plot3dfc(exemplarB, db=dps)
plot3d(FCWB)
plot3dfc(exemplarC, db=dps)
plot3d(FCWB)
plot3dfc(exemplarD, db=dps)
plot3dfc(exemplarALT, db=dps)
plot3d(FCWB)
plot3dfc(exemplarALT_PLPC, db=dps)
